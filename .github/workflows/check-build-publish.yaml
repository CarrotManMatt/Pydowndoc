name: Lint, Type-Check, Test, Build and Publish Package

"on":
    pull_request:
        branches: [main]
    push:
        branches: [main]
        tags: [v*]

jobs:
    upload-downdoc-binaries:
        uses: ./.github/workflows/upload-downdoc-binaries.yaml

    # yamllint disable-line rule:key-ordering
    convert-readme:
        name: Convert README
        needs: [upload-downdoc-binaries]
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v5

            - name: Download Linux x86_64 downdoc Binary
              uses: actions/download-artifact@v5
              with:
                name: downdoc-linux-x86-64-binary
                path: Pydowndoc-bin/downloads/

            - name: Make Linux x86_64 downdoc Binary An Executable
              run: chmod +x Pydowndoc-bin/downloads/downdoc-linux-x86-64

            - name: Convert Project README
              run: Pydowndoc-bin/downloads/downdoc-linux-x86-64 README.adoc

            - name: Save Converted README
              uses: actions/upload-artifact@v4
              with:
                name: converted-readme
                path: README.md

    uv-check:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v5
              with:
                fetch-depth: 0

            - name: Create Blank README.md
              run: touch README.md

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                enable-cache: true

            - name: Check uv.lock (ensure all dependencies up to date)
              run: uv lock --check

    # yamllint disable-line rule:key-ordering
    mypy-package:
        env:
            UV_FROZEN: true
            UV_NO_SYNC: true
            UV_PYTHON_DOWNLOADS: never
        needs: [uv-check]
        runs-on: ubuntu-latest

        strategy:
            matrix:
                python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

        steps:
            - uses: actions/checkout@v5

            - name: Create Blank README.md
              run: touch README.md

            - name: Set Up Python
              uses: actions/setup-python@v6
              with:
                python-version: ${{matrix.python-version}}

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                enable-cache: true
                python-version: ${{matrix.python-version}}

            - name: Install mypy From Locked Dependencies
              run: uv sync --no-group dev --group type-check

            - id: store-hashed-python-version
              name: Store Hashed Python Version
              run: echo "hashed_python_version=$(uv run -- python -VV | sha256sum | cut -d' ' -f1)"
                >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              with:
                key: mypy|${{steps.store-hashed-python-version.outputs.hashed_python_version}}|package
                path: ./.mypy_cache

            - name: Run mypy
              run: uv run -- mypy pydowndoc/  # TODO: Add GitHub workflows output format

    # yamllint disable-line rule:key-ordering
    mypy-scripts:
        env:
            UV_FROZEN: true
            UV_NO_SYNC: true
            UV_PYTHON_DOWNLOADS: never
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v5

            - name: Set Up Python
              uses: actions/setup-python@v6
              with:
                python-version-file: .python-version

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                enable-cache: true

            - name: Install mypy From Locked Dependencies
              run: uv sync --only-group type-check --only-group build-dev

            - id: store-hashed-python-version
              name: Store Hashed Python Version
              run: echo "hashed_python_version=$(uv run -- python -VV | sha256sum | cut -d' ' -f1)"
                >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              with:
                key: mypy|${{steps.store-hashed-python-version.outputs.hashed_python_version}}|scripts
                path: ./.mypy_cache

            - name: Run mypy
              run: uv run -- mypy Pydowndoc-bin/hatch_build.py  # TODO: Add GitHub workflows output format

    # yamllint disable-line rule:key-ordering
    pre-commit:
        env:
            UV_FROZEN: true
            UV_NO_SYNC: true
            UV_PYTHON_DOWNLOADS: never
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v5

            - name: Add GB Locale
              run: |
                sudo apt-get update
                sudo apt-get install -y locales
                sudo locale-gen en_GB.UTF-8
              shell: bash

            - name: Set Up Python
              uses: actions/setup-python@v6
              with:
                python-version-file: .python-version

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                enable-cache: true

            - name: Install pre-commit From Locked Dependencies
              run: uv sync --only-group pre-commit

            - id: store-hashed-python-version
              name: Store Hashed Python Version
              run: echo "hashed_python_version=$(uv run -- python -VV | sha256sum | cut -d' ' -f1)"
                >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              with:
                key: pre-commit|${{steps.store-hashed-python-version.outputs.hashed_python_version}}|${{hashFiles('.pre-commit-config.yaml')}}
                path: ~/.cache/pre-commit

            - name: Setup pre-commit Environments
              run: uv run -- pre-commit install-hooks

            - name: Store pre-commit Checks Which Require Skipping
              run: echo "SKIP=check-github-workflows,ruff,uv-lock" >> $GITHUB_ENV

            - name: Run pre-commit
              run: uv run -- pre-commit run --all-files --hook-stage manual  # TODO: Add GitHub workflows output format

            - if: ${{!cancelled()}}
              uses: pre-commit-ci/lite-action@v1.1.0

    # yamllint disable-line rule:key-ordering
    ruff-lint:
        env:
            UV_FROZEN: true
            UV_NO_SYNC: true
            UV_PYTHON_DOWNLOADS: never
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v5

            - name: Set Up Python
              uses: actions/setup-python@v6
              with:
                python-version-file: .python-version

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                enable-cache: true

            - name: Install ruff From Locked Dependencies
              run: uv sync --only-group lint-format

            - id: store-hashed-python-version
              name: Store Hashed Python Version
              run: echo "hashed_python_version=$(uv run -- python -VV | sha256sum | cut -d' ' -f1)"
                >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              with:
                key: ruff|${{steps.store-hashed-python-version.outputs.hashed_python_version}}
                path: ./.ruff_cache

            - name: Run Ruff
              run: uv run -- ruff check --no-fix --output-format=github

    # yamllint disable-line rule:key-ordering
    build-pydowndoc-bin:
        container: ${{fromJSON(matrix.container)}}
        env:
            UV_FROZEN: true
            UV_NO_SYNC: true
            UV_PYTHON_DOWNLOADS: never
        name: Build ${{matrix.display_os}} ${{matrix.display_architecture}} Pydowndoc-bin package
        needs: [upload-downdoc-binaries, pre-commit, ruff-lint, mypy-scripts]
        runs-on: ${{matrix.runner}}

        strategy:
            matrix:
                include:
                    - architecture: x86-64
                      auditwheel_architecture: x86_64
                      container: "{\"image\": \"quay.io/pypa/manylinux_2_34_x86_64\"}"
                      display_architecture: x86_64
                      display_os: Linux
                      os: linux
                      runner: ubuntu-latest

                    - architecture: x86-64
                      container: "null"
                      display_architecture: x86_64
                      display_os: Windows
                      os: windows
                      runner: windows-latest

                    - architecture: x86-64
                      container: "null"
                      display_architecture: x86_64
                      display_os: macOS
                      os: macos
                      runner: macos-13

                    - architecture: arm64
                      auditwheel_architecture: aarch64
                      container: "{\"image\": \"quay.io/pypa/manylinux_2_34_aarch64\"}"
                      display_architecture: arm64
                      display_os: Linux
                      os: linux
                      runner: ubuntu-24.04-arm

        steps:
            - uses: actions/checkout@v5
              with:
                fetch-depth: 0

            - if: "!contains(matrix.container, 'pypa/manylinux')"
              name: Set Up Python
              uses: actions/setup-python@v6
              with:
                python-version-file: .python-version

            - if: "!contains(matrix.container, 'pypa/manylinux')"
              name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                enable-cache: true

            - name: Download ${{matrix.display_os}} ${{matrix.display_architecture}} downdoc Binaries
              uses: actions/download-artifact@v5
              with:
                name: downdoc-${{matrix.os}}-${{matrix.architecture}}-binary
                path: Pydowndoc-bin/downloads/

            - name: Install Build Dependencies From Lock File
              run: uv sync --only-group build

            - name: Build ${{matrix.display_os}} ${{matrix.display_architecture}} Package
              run: uv run --directory Pydowndoc-bin -- hatch build -t custom

            - if: matrix.os == 'linux'
              name: Repair ${{matrix.display_os}} ${{matrix.display_architecture}} Packages
              run: uv run -- auditwheel repair $(find Pydowndoc-bin/dist/ -type f -iname "*${{matrix.os}}_${{matrix.auditwheel_architecture}}.whl")
                -w Pydowndoc-bin/dist

            - if: matrix.os == 'linux'
              name: Remove Unrepaired ${{matrix.display_os}} ${{matrix.display_architecture}} Packages
              run: rm Pydowndoc-bin/dist/*-${{matrix.os}}_${{matrix.auditwheel_architecture}}.whl

            - name: Save Build Artifacts
              uses: actions/upload-artifact@v4
              with:
                name: built-pydowndoc-bin-${{matrix.os}}-${{matrix.architecture}}-package
                path: Pydowndoc-bin/dist/

    # yamllint disable-line rule:key-ordering
    build-pydowndoc:
        env:
            UV_NO_SYNC: true
            UV_PYTHON_DOWNLOADS: never
        name: Build Pydowndoc package
        needs: [convert-readme, mypy-package, pre-commit, ruff-lint, uv-check]
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v5
              with:
                fetch-depth: 0

            - name: Set Up Python
              uses: actions/setup-python@v6
              with:
                python-version-file: .python-version

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                enable-cache: true

            - name: Download Converted README
              uses: actions/download-artifact@v5
              with:
                name: converted-readme

            - name: Build Package
              run: uv build --build --no-sources

            - name: Save Build Artifacts
              uses: actions/upload-artifact@v4
              with:
                name: built-pydowndoc-package
                path: dist/

    # yamllint disable-line rule:key-ordering
    publish:
        environment: publish

        if: github.ref_type == 'tag'

        needs: [build-pydowndoc, build-pydowndoc-bin]
        permissions:
            id-token: write

        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v5

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                enable-cache: true

            - name: Download Pydowndoc Build Artifacts
              uses: actions/download-artifact@v5
              with:
                merge-multiple: true
                path: dist/
                pattern: built-pydowndoc-package

            - name: Download Pydowndoc-bin Build Artifacts
              uses: actions/download-artifact@v5
              with:
                merge-multiple: true
                path: dist/
                pattern: built-pydowndoc-bin-*-package

            - name: Publish to PyPI
              run: uv publish

    # yamllint disable-line rule:key-ordering
    test-publish:
        environment: test-publish

        if: github.ref_type != 'tag' && github.event_name != 'pull_request'

        needs: [build-pydowndoc, build-pydowndoc-bin]
        permissions:
            id-token: write
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v5

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                enable-cache: true

            - name: Download Pydowndoc Build Artifacts
              uses: actions/download-artifact@v5
              with:
                merge-multiple: true
                path: dist/
                pattern: built-pydowndoc-package

            - name: Download Pydowndoc-bin Build Artifacts
              uses: actions/download-artifact@v5
              with:
                merge-multiple: true
                path: dist/
                pattern: built-pydowndoc-bin-*-package

            - name: Publish to Test-PyPI
              run: uv publish --index Test-PyPI

    # yamllint disable-line rule:key-ordering
    release:
        if: github.ref_type == 'tag'

        needs: [publish]
        permissions:
            contents: write
            id-token: write
        runs-on: ubuntu-latest

        steps:

            - name: Download Pydowndoc Build Artifacts
              uses: actions/download-artifact@v5
              with:
                merge-multiple: true
                path: dist/
                pattern: built-pydowndoc-package

            - name: Download Pydowndoc-bin Build Artifacts
              uses: actions/download-artifact@v5
              with:
                merge-multiple: true
                path: dist/
                pattern: built-pydowndoc-bin-*-package

            - name: Sign Build Artifacts
              uses: sigstore/gh-action-sigstore-python@v3.0.1
              with:
                inputs: ./dist/pydowndoc-*.whl ./dist/pydowndoc-*.tar.gz

            - env:
                GITHUB_TOKEN: ${{github.token}}
              name: Create GitHub Release
              run: gh release create '${{github.ref_name}}' dist/** --repo '${{github.repository}}'
                --verify-tag --generate-notes
